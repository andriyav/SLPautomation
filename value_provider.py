import os
from typing import List

from dotenv import load_dotenv

load_dotenv()


class ValueProvider:

    @classmethod
    def get_email(cls) -> str:
        return os.getenv("EMAIL")

    @classmethod
    def get_password(cls) -> str:
        return os.getenv("PASSWORD")

    @classmethod
    def get_list_of_sources(cls) -> list[str]:
        sources = ["290",
                   # "5",
                   # "7",
                   # "8",
                   # "9",
                   # "10",
                   # "11",
                   # "13",
                   # "15",
                   # "16",
                   # "17",
                   # "19",
                   # "21",
                   # "22",
                   # "26",
                   # "28",
                   # "37",
                   # "40",
                   # "47",
                   # "48",
                   # "49",
                   # "50",
                   # "56",
                   # "57",
                   # "70",
                   # "71",
                   # "75",
                   # "76",
                   # "80",
                   # "82",
                   # "84",
                   # "85",
                   # "89",
                   # "90",
                   # "92",
                   # "93",
                   # "98",
                   # "99",
                   # "100",
                   # "101",
                   # "102",
                   # "107",
                   # "108",
                   # "116",
                   # "119",
                   # "121",
                   # "122",
                   # "123",
                   # "125",
                   # "127",
                   # "128",
                   # "132",
                   # "134",
                   # "135",
                   # "136",
                   # "139",
                   # "142",
                   # "144",
                   # "145",
                   # "146",
                   # "148",
                   # "149",
                   # "150",
                   # "151",
                   # "152",
                   # "154",
                   # "155",
                   # "160",
                   # "161",
                   # "162",
                   # "164",
                   # "168",
                   # "170",
                   # "171",
                   # "172",
                   # "176",
                   # "190",
                   # "192",
                   # "195",
                   # "200",
                   # "201",
                   # "209",
                   # "210",
                   # "217",
                   # "218",
                   # "220",
                   # "222",
                   # "224",
                   # "225",
                   # "233",
                   # "243",
                   # "252",
                   # "257",
                   # "259",
                   # "260",
                   # "261",
                   # "273",
                   # "276",
                   # "279",
                   # "283",
                   # "286",
                   # "287",
                   # "290",
                   # "291",
                   # "295",
                   # "302",
                   # "303",
                   # "309",
                   # "310",
                   # "315",
                   # "322",
                   # "326",
                   # "328",
                   # "330",
                   # "334",
                   # "335",
                   # "336",
                   # "339",
                   # "344",
                   # "345",
                   # "350",
                   # "360",
                   # "362",
                   # "368",
                   # "370",
                   # "371",
                   # "375",
                   # "376",
                   # "377",
                   # "378",
                   # "379",
                   # "380",
                   # "381",
                   # "398",
                   # "404",
                   # "406",
                   # "408",
                   # "410",
                   # "412",
                   # "414",
                   # "415",
                   # "416",
                   # "417",
                   # "418",
                   # "424",
                   # "425",
                   # "426",
                   # "428",
                   # "429",
                   # "430",
                   # "431",
                   # "433",
                   # "434",
                   # "439",
                   # "440",
                   # "442",
                   # "450",
                   # "457",
                   # "459",
                   # "461",
                   # "463",
                   # "466",
                   # "472",
                   # "476",
                   # "477",
                   # "484",
                   # "485",
                   # "490",
                   # "493",
                   # "494",
                   # "500",
                   # "503",
                   # "507",
                   # "513",
                   # "519",
                   # "522",
                   # "538",
                   # "539",
                   # "541",
                   # "546",
                   # "550",
                   # "551",
                   # "555",
                   # "557",
                   # "560",
                   # "563",
                   # "574",
                   # "576",
                   # "581",
                   # "586",
                   # "591",
                   # "592",
                   # "593",
                   # "625",
                   # "629",
                   # "633",
                   # "635",
                   # "644",
                   # "649",
                   # "655",
                   # "659",
                   # "663",
                   # "664"
                   ]
        return sources

    @classmethod
    def get_classes(cls) -> list[int]:
        classes = [
            1,

        ]
        return classes

    @classmethod
    def get_mapping_configuration(cls):
        config = [
            # {
            #     "field": "commissions-properties-comp_based_on",
            #     "MappersProvider": None,
            #     "Metadata": "SpecialListingConditions",
            #     "Rules": 411,
            #     "Enhancers": 33,
            #     "Const": "False"
            # },

            {
                "field": "geo",
                "MappersProvider": None,
                "Metadata": "SpecialListingConditions",
                "Rules": 38,
                "Enhancers": None,
                "Const": "False"
            },
            # {
            #     "field": "commissions-properties-comp_based_on",
            #     "MappersProvider": 6,
            #     "Metadata": "SpecialListingConditions",
            #     "Rules": 411,
            #     "Enhancers": 33,
            #     "Const": "False"
            # },
        ]

        return config
